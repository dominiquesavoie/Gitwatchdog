// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using GitWatchdog.Presentation.ViewModel;
using Gitwatchdog.MacOS.Services;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.ComponentModel;
using GitWatchdog.Presentation.Helpers;
using GitWatchdog.Presentation.Extensions;
using System.Reactive.Concurrency;

namespace Gitwatchdog.MacOS
{
	public partial class Logs : NSViewController
	{
        private MainViewModel ViewModel { get; set; }

        private CompositeDisposable _subscriptions = new CompositeDisposable();

		public Logs (IntPtr handle) : base (handle)
		{
		}

		public override void ViewWillAppear()
		{
			base.ViewWillAppear();

            ViewModel = ViewModelProvider.ProvideMainViewModel();

            Observable.FromEventPattern<PropertyChangedEventHandler, PropertyChangedEventArgs>(
                    h => ViewModel.PropertyChanged += h,
                    h => ViewModel.PropertyChanged -= h
                )
                .Where(args => args.EventArgs.PropertyName == nameof(ViewModel.Log))
                .Do(_ =>  InvokeOnMainThread(() => txtLogs.Value = ViewModel.Log))
                .CatchError()
                .Subscribe()
                .DisposeWith(_subscriptions);
		}

		public override void ViewWillDisappear()
		{
			base.ViewWillDisappear();
            _subscriptions.Clear();
            ViewModel = null;
		}
	}
}
